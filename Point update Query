#include<bits/stdc++.h>
using namespace std;
 #define sort(a) sort(a.begin(),a.end())
#define all(x) x.begin(),x.end()

// #define unq(x) x.erase(unique(aint(x)),x.end());
#define int long long
#define int long long
#define endl "\n"
#define Endl "\n"
#define hae cout<<"Yes"<<endl;
#define nah cout<<"No"<<endl;
#define Palmist_Masum ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define pb push_back
#define pp pchoice_back
#define vtr vector<int>
#define sz size()
#define print(x) cout<<x<<Endl;
#define ff first
#define ss second
#define fncc (auto valid =[&] (int x) -> bool { };)
typedef vector <pair <int , int> > vpr;
#define printarray(a) for(int i=0;i<a.sz;i++)cout<<a[i]<<' ';cout<<endl;
/*vector<bitset<31>> v(n);
bitset<31>kk(arr[i]);
v[i]=kk;*/
const int MAXN=1e6+1;
const int dj=1e9+7;
const int INF=1e16;
void depression()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
}
int n,arr[MAXN],seg[4*MAXN];
void build(int root,int lo,int hi)
{
    if(lo==hi)
    {
        seg[root]=arr[lo];
        return;
    }
    int mid=(lo+hi)/2;
    build(2*root,lo,mid);
    build(2*root+1,mid+1,hi);
    seg[root]=max(seg[2*root],seg[2*root+1]);

}
int query(int root,int lo,int hi,int l,int r)
{
    if(l<=lo and r>=hi)
    {
        return seg[root];
    }
    if(l>hi or lo>r)
    {
        return 0;
    }
    int mid =(lo+hi)/2;
    int left=query(2*root,lo,mid,l,r);
    int right=query(2*root+1,mid+1,hi,l,r);
    return max(left,right);
}
void update(int root,int lo,int hi,int l ,int r,int value)
{
    if(lo>r || hi<l)
    {
         return;
    }
    if(lo>=l && hi<=r)
    {
        seg[root]=value;
        return;
    }
    int mid=(lo+hi)/2;
    // if(ind<=mid)
    // {
        update(2*root,lo,mid,l,r,value);
    // }
    // else
    // {
        update(2*root+1,mid+1,hi,l,r,value);
    // }
    seg[root]=max(seg[2*root]+seg[2*root+1]);
}
void Chaos()
{
    cin>>n;
    for(int i=1;i<=n;++i)
    {
        cin>>arr[i];
    }
    build(1,1,n);
    int q;
    cin>>q;
    while(q--)
    {
        int x,l,r;
        cin>>x;
        if(x==1)
        {
            int ind,value;
            cin>>ind>>value;
            update(1,1,n,l,r,value);
        }
        else
        {
            cin>>l>>r;
            cout<<query(1,1,n,l,r)<<endl;
        }

    }
    
}
signed main()
{
    depression();
    Palmist_Masum;
    int __=1;
    cin>>__;
    for(int i=1; __--;i++)
    {
         // cout<<"Case "<<i<<":"<<endl;
        
        Chaos();
    }
     
    return 0;
}
